			Информация о функциях:
		Mandatory:
memset, printf, malloc, free, write, usleep, -- Все знаем, все библиотечное

gettimeofday() - получает кол-во секунд и микросекунд с начала

int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine)(void*), void *arg);
// Cоздает новый поток Default: pthread_create(&tid, NULL, start_func, arg);
[1] адрес нового потока
[2] структура атрибутов
[3] начальная функция нового потока
[4] аргументы для начальной функции
Возвращает 1 если ошибка. 

int pthread_detach(pthread_t thread);
// отключиться от потока, сделав его при этом отдельным

int pthread_join(pthread_t tid, void **thread_return); 
[1] id потока [2] значение, возвращенное функцией потока. (idk what is it)
//подключиться к другому потоку и ожидать его завершения

int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *attr);
[1] Адрес мьютекса и [2] атрибуты
// ининицализирует мьютекс 

int pthread_mutex_destroy(pthread_mutex_t *mutex);
// уничтожает мьютекс

int pthread_mutex_lock(pthread_mutex_t *mutex);
// Блокирует мьютекс

int pthread_mutex_unlock(pthread_mutex_t * mutex);
// Разблокирует мьютекс


		Bonus:

sem_t *sem_open(const char *name, int oflag, unsigned long mode, unsigned int value);
! возвращает указатель на семафор
[1] имя семафора
[2] флаг конроля семафора (O_CREATE - создает семафор)
[3] мод семафора S_IRWXU -- is equivalent to ‘(S_IRUSR | S_IWUSR | S_IXUSR)’. (чтение | запись | запуск)
[4] инициализинованое значение семафора (1 - как мьюетекс, но нам надо =кол-ву философов)
// устанавливает соединение между именованным sem именем name и процессом.

int sem_close(sem_t *sem);
! 0 / -1
[1] указатель на семафор
// закрывает семафор

int sem_unlink(const char *name);
! 0 / -1
// убирает семафор с именем name

int sem_wait(sem_t *sem);
! 0 / -1
// блокирует семафор

int sem_post(sem_t *sem);
! 0 / -1
// разблокирует семафор